{
    "name": "D",
    "version": "1.2.9",
    "fileTypes": [
        "d"
    ],
    "scopeName": "source.d",

    "foldingStartMarker": "\\{\\s*$",
    "foldingStopMarker": "^\\s*\\}",

    "patterns": [
        {
            "name": "meta.preprocessor.script.d",
            "match": "^(#!.*)$"
        },
        {
            "name": "meta.declaration.d",
            "begin": "\\b(module|import)\\b",
            "beginCaptures": {
                "0": {
                    "name": "keyword.other.import.d"
                }
            },
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.terminator.d"
                }
            },
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#comments"
                },
                {
                    "name": "keyword.other.import.d",
                    "match": "\\b(as|show|hide)\\b"
                },
                {
                    "name": "keyword.control.d",
                    "match": "\\b(if)\\b"
                }
            ]
        },
        {
            "include": "#comments"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#constants-and-special-vars"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#strings"
        }
    ],

    "repository": {
        "dartdoc": {
            "patterns": [
                {
                    "match": "(\\[.*?\\])",
                    "captures": {
                        "0": {
                            "name": "variable.name.source.d"
                        }
                    }
                },
                {
                    "match": "^ {4,}(?![ \\*]).*",
                    "captures": {
                        "0": {
                            "name": "variable.name.source.d"
                        }
                    }
                },
                {
                    "contentName": "variable.other.source.d",
                    "begin": "```.*?$",
                    "end": "```"
                },
                {
                    "match": "(`[^`]+?`)",
                    "captures": {
                        "0": {
                            "name": "variable.other.source.d"
                        }
                    }
                },
                {
                    "match": "(\\* ((    ).*))$",
                    "captures": {
                        "2": {
                            "name": "variable.other.source.d"
                        }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.empty.d",
                    "match": "/\\*\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.d"
                        }
                    }
                },
                {
                    "include": "#comments-doc-oldschool"
                },
                {
                    "include": "#comments-doc"
                },
                {
                    "include": "#comments-inline"
                }
            ]
        },
        "comments-doc-oldschool": {
            "patterns": [
                {
                    "name": "comment.block.documentation.d",
                    "begin": "/\\*\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "include": "#comments-doc-oldschool"
                        },
                        {
                            "include": "#comments-block"
                        },
                        {
                            "include": "#dartdoc"
                        }
                    ]
                }
            ]
        },
        "comments-doc": {
            "patterns": [
                {
                    "name": "comment.block.documentation.d",
                    "begin": "///",
                    "while": "^\\s*///",
                    "patterns": [
                        {
                            "include": "#dartdoc"
                        }
                    ]
                }
            ]
        },
        "comments-inline": {
            "patterns": [
                {
                    "include": "#comments-block"
                },
                {
                    "match": "((//).*)$",
                    "captures": {
                        "1": {
                            "name": "comment.line.double-slash.d"
                        }
                    }
                }
            ]
        },
        "comments-block": {
            "patterns": [
                {
                    "name": "comment.block.d",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "include": "#comments-block"
                        }
                    ]
                }
            ]
        },
        "annotations": {
            "patterns": [
                {
                    "name": "storage.type.annotation.d",
                    "match": "@[a-zA-Z]+"
                }
            ]
        },
        "constants-and-special-vars": {
            "patterns": [
                {
                    "name": "constant.language.d",
                    "match": "(?<!\\$)\\b(true|false|null)\\b(?!\\$)"
                },
                {
                    "name": "variable.language.d",
                    "match": "(?<!\\$)\\b(this|super|augmented)\\b(?!\\$)"
                },
                {
                    "name": "constant.numeric.d",
                    "match": "(?<!\\$)\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b(?!\\$)"
                },
                {
                    "include": "#class-identifier"
                },
                {
                    "include": "#function-identifier"
                }

            ]
        },
        "class-identifier": {
            "patterns": [
                {
                    "match": "(?<!\\$)\\b(bool|num|uint|int|ushort|short|float|ubyte|byte|char|double|dynamic)\\b(?!\\$)",
                    "name": "support.class.d"
                },
                {
                    "match": "(?<!\\$)\\bvoid\\b(?!\\$)",
                    "name": "storage.type.primitive.d"
                },
                {
                    "begin": "(?<![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*)\\b",
                    "end": "(?!<)",
                    "beginCaptures": {
                        "1": {
                            "name": "support.class.d"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type-args"
                        }
                    ]
                }
            ]
        },
        "function-identifier": {
            "patterns": [
                {
                    "match": "([_$]*[a-z][a-zA-Z0-9_$]*)(<(?:[a-zA-Z0-9_$<>?]|,\\s*|\\s+extends\\s+)+>)?[!?]?\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.d"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#type-args"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "type-args": {
            "begin": "(<)",
            "end": "(>)",
            "beginCaptures": {
                "1": {
                    "name": "other.source.d"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "other.source.d"
                }
            },
            "patterns": [
                {
                    "include": "#class-identifier"
                },
                {
                    "match": ","
                },
                {
                    "name": "keyword.declaration.d",
                    "match": "extends"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.cast.d",
                    "match": "(?<!\\$)\\bcast\\b(?!\\$)"
                },
                {
                    "name": "keyword.is.d",
                    "match": "(?<!\\$)\\bis\\b(?!\\$)"
                },
                {
                    "name": "keyword.control.catch-exception.d",
                    "match": "(?<!\\$)\\b(try|on|catch|finally|throw|rethrow)\\b(?!\\$)"
                },
                {
                    "name": "keyword.control.d",
                    "match": "(?<!\\$)\\b(break|case|continue|default|do|else|for|foreach|reverse_foreach|if|in|switch|while|when|version)\\b(?!\\$)"
                },
                {
                    "name": "keyword.control.d",
                    "match": "(?<!\\$)\\b(sync(\\*)?|async(\\*)?|await|yield(\\*)?)\\b(?!\\$)"
                },
                {
                    "name": "keyword.control.d",
                    "match": "(?<!\\$)\\bassert\\b(?!\\$)"
                },
                {
                    "name": "keyword.control.new.d",
                    "match": "(?<!\\$)\\b(new)\\b(?!\\$)"
                },
                {
                    "name": "keyword.control.return.d",
                    "match": "(?<!\\$)\\b(return)\\b(?!\\$)"
                },
                {
                    "name": "keyword.declaration.d",
                    "match": "(?<!\\$)\\b(abstract|interface|class|template|struct|union|mixin|enum|extends|external|factory|implements|mixin|native|alias|typeof|tupleof|with)\\b(?!\\$)"
                },
                {
                    "name": "storage.modifier.d",
                    "match": "(?<!\\$)\\b(static|public|private|final|const|auto|required|shared|__gshared|export|extern)\\b(?!\\$)"
                },
                {
                    "name": "storage.type.primitive.d",
                    "match": "(?<!\\$)\\b(?:void|var)\\b(?!\\$)"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.d",
                    "match": "(?<!\\$)\\b(is\\!?)\\b(?!\\$)"
                },
                {
                    "name": "keyword.operator.ternary.d",
                    "match": "\\?|:"
                },
                {
                    "name": "keyword.operator.bitwise.d",
                    "match": "(<<|>>>?|~|\\^|\\||&)"
                },
                {
                    "name": "keyword.operator.assignment.bitwise.d",
                    "match": "((&|\\^|\\||<<|>>>?)=)"
                },
                {
                    "name": "keyword.operator.closure.d",
                    "match": "(=>)"
                },
                {
                    "name": "keyword.operator.comparison.d",
                    "match": "(==|!=|<=?|>=?)"
                },
                {
                    "name": "keyword.operator.assignment.arithmetic.d",
                    "match": "(([+*/%-]|\\~)=)"
                },
                {
                    "name": "keyword.operator.assignment.d",
                    "match": "(=)"
                },
                {
                    "name": "keyword.operator.increment-decrement.d",
                    "match": "(\\-\\-|\\+\\+)"
                },
                {
                    "name": "keyword.operator.arithmetic.d",
                    "match": "(\\-|\\+|\\*|\\/|\\~\\/|%)"
                },
                {
                    "name": "keyword.operator.logical.d",
                    "match": "(!|&&|\\|\\|)"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#constants-and-special-vars"
                },
                {
                    "include": "#strings"
                },
                {
                    "name": "variable.parameter.d",
                    "match": "[a-zA-Z0-9_]+"
                },
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "string-interp": {
            "patterns": [
                {
                    "name": "meta.embedded.expression.d",
                    "match": "\\$([a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.d"
                        }
                    }
                },
                {
                    "name": "meta.embedded.expression.d",
                    "begin": "\\$\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "constant.character.escape.d",
                    "match": "\\\\."
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.interpolated.triple.double.d",
                    "begin": "(?<!r)\"\"\"",
                    "end": "\"\"\"(?!\")",
                    "patterns": [
                        {
                            "include": "#string-interp"
                        }
                    ]
                },
                {
                    "name": "string.interpolated.triple.single.d",
                    "begin": "(?<!r)'''",
                    "end": "'''(?!')",
                    "patterns": [
                        {
                            "include": "#string-interp"
                        }
                    ]
                },
                {
                    "name": "string.quoted.triple.double.d",
                    "begin": "r\"\"\"",
                    "end": "\"\"\"(?!\")"
                },
                {
                    "name": "string.quoted.triple.single.d",
                    "begin": "r'''",
                    "end": "'''(?!')"
                },
                {
                    "name": "string.interpolated.double.d",
                    "begin": "(?<!\\|r)\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "invalid.string.newline",
                            "match": "\\n"
                        },
                        {
                            "include": "#string-interp"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.d",
                    "begin": "r\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "invalid.string.newline",
                            "match": "\\n"
                        }
                    ]
                },
                {
                    "name": "string.interpolated.single.d",
                    "begin": "(?<!\\|r)'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "invalid.string.newline",
                            "match": "\\n"
                        },
                        {
                            "include": "#string-interp"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.d",
                    "begin": "r'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "invalid.string.newline",
                            "match": "\\n"
                        }
                    ]
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.comma.d",
                    "match": ","
                },
                {
                    "name": "punctuation.terminator.d",
                    "match": ";"
                },
                {
                    "name": "punctuation.dot.d",
                    "match": "\\."
                }
            ]
        }
    }
}