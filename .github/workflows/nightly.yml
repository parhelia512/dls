name: nightly


on:
  workflow_dispatch:
  #schedule:
  #- cron: 0 20 * * *
jobs:

  dist-x86_64-unknown-linux-gnu:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
    - uses: dlang-community/setup-dlang@v2
      with:
        compiler: ldc-master
    - uses: actions/checkout@v1
    # - name: Install LDC
    #   run: curl -fsS https://dlang.org/install.sh | bash -s ldc && ls ~/dlang/ && source ~/dlang/ldc*/activate
    - name: Build DCD
      # run: source ~/dlang/ldc*/activate && make build-dcd-release
      run: make build-dcd-release
    - name: Build DLS
      # run: source ~/dlang/ldc*/activate && make build-dls-release
      run: make build-dls-release
    - name: Move to Dist
      run: |
        mkdir dist
        mv bin/dls dist/dls-x86_64-unknown-linux-gnu
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist-x86_64-unknown-linux-gnu
        path: ./dist

  dist-x86_64-pc-windows-msvc:
    timeout-minutes: 30
    runs-on: windows-2019
    steps:
    - uses: dlang-community/setup-dlang@v2
      with:
        compiler: ldc-master
    - uses: actions/checkout@v1
    - name: Build DCD
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
        ./ci.bat dcd
    - name: Build dls
      shell: cmd
      run: ./ci.bat dls
    - name: Move to Dist
      shell: cmd
      run: | 
        echo "-- create dist folder"
        mkdir dist
        echo "-- debug"
        dir
        dir bin
        echo "-- move dls.exe to dist"
        move bin/dls.exe dist/
        cd dist
        echo "-- debug"
        dir
        echo "rename dls.exe"
        ren dls.exe dls-x86_64-pc-windows-msvc.exe
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist-x86_64-pc-windows-msvc
        path: ./dist

  publish:
    name: publish
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ['dist-x86_64-unknown-linux-gnu', 'dist-x86_64-pc-windows-msvc']
    steps:
    - name: Install Nodejs
      uses: actions/setup-node@v1
      with:
        node-version: 16.x
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}

    - run: echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
    - run: 'echo "HEAD_SHA: $HEAD_SHA"'

    - uses: actions/download-artifact@v2
      with:
        name: dist-x86_64-unknown-linux-gnu
        path: dist
    - run: |
        ls -al ./dist
        cd dist

        chmod +x dls-x86_64-unknown-linux-gnu
        zip -r dls-x86_64-unknown-linux-gnu.zip dls-x86_64-unknown-linux-gnu

    - name: Publish Release
      uses: ./.github/actions/github-release
      with:
        files: "dist/*"
        name: "nightly"
        token: ${{ secrets.GITHUB_TOKEN }}